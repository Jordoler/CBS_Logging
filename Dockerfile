# Generated by Neurodocker and Reproenv.

FROM ubuntu:24.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  bzip2 \
                  ca-certificates \
                  git \
                  python-is-python3 \
                  python3-pip \
                  wget \
           && rm -rf /var/lib/apt/lists/*
WORKDIR /opt/code
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  cmake \
                  dos2unix \
                  g++ \
                  git \
                  libboost-all-dev \
                  libboost-program-options1.74.0 \
                  libfftw3-dev \
                  libhdf5-103-1t64 \
                  libhdf5-dev \
                  libpugixml-dev \
                  libpugixml1v5 \
                  libxml2-dev \
                  libxslt1-dev \
                  libxslt1.1 \
                  vim \
           && rm -rf /var/lib/apt/lists/*
RUN  git clone https://github.com/ismrmrd/ismrmrd.git \
        && cd ./ismrmrd \
        && cmake . \
        && make -j 4 \
        && make install
RUN  git clone https://github.com/ismrmrd/siemens_to_ismrmrd.git \
        && cd siemens_to_ismrmrd \
        && mkdir build \
        && cd build \
        && cmake .. \
        && make -j 4 \
        && make install
# Modified this line to add --break-system-packages        
RUN  pip3 install --break-system-packages h5py ismrmrd matplotlib pydicom==3.0.1 pynetdicom nibabel scipy scikit-image 
RUN  git clone https://github.com/ismrmrd/ismrmrd-python-tools.git \
        && cd ismrmrd-python-tools \
# Modified this line to add --break-system-packages           
        && pip3 install --break-system-packages --no-cache-dir .
RUN  git clone https://github.com/kspaceKelvin/python-ismrmrd-server \
        && find /opt/code/python-ismrmrd-server -name "*.sh" -exec chmod +x {} \; \
        && find /opt/code/python-ismrmrd-server -name "*.sh" | xargs dos2unix \
        && sed -i 's/invertcontrast/default_replace_with_valid_name/g' /opt/code/python-ismrmrd-server/main.py
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  gcc-aarch64-linux-gnu cmake make build-essential \
           && rm -rf /var/lib/apt/lists/*
WORKDIR /opt/code
COPY ["cbsfmrilogging.py", \
      "/opt/code/python-ismrmrd-server/cbsfmrilogging.py"]
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:24.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "bzip2", \
          "ca-certificates", \
          "git", \
          "wget", \
          "build-essential", \
          "python3-pip", \
          "python-is-python3" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           bzip2 \\\\\\n           ca-certificates \\\\\\n           git \\\\\\n           python-is-python3 \\\\\\n           python3-pip \\\\\\n           wget \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/code" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "build-essential", \
          "libxslt1.1", \
          "libhdf5-103-1t64", \
          "libboost-program-options1.74.0", \
          "libpugixml1v5", \
          "vim", \
          "dos2unix", \
          "git", \
          "cmake", \
          "g++", \
          "libhdf5-dev", \
          "libxml2-dev", \
          "libxslt1-dev", \
          "libboost-all-dev", \
          "libfftw3-dev", \
          "libpugixml-dev" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           cmake \\\\\\n           dos2unix \\\\\\n           g++ \\\\\\n           git \\\\\\n           libboost-all-dev \\\\\\n           libboost-program-options1.74.0 \\\\\\n           libfftw3-dev \\\\\\n           libhdf5-103-1t64 \\\\\\n           libhdf5-dev \\\\\\n           libpugixml-dev \\\\\\n           libpugixml1v5 \\\\\\n           libxml2-dev \\\\\\n           libxslt1-dev \\\\\\n           libxslt1.1 \\\\\\n           vim \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/ismrmrd/ismrmrd.git \\\\\\n && cd ./ismrmrd \\\\\\n && cmake . \\\\\\n && make -j 4 \\\\\\n && make install" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/ismrmrd/siemens_to_ismrmrd.git \\\\\\n && cd siemens_to_ismrmrd \\\\\\n && mkdir build \\\\\\n && cd build \\\\\\n && cmake .. \\\\\\n && make -j 4 \\\\\\n && make install" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " pip3 install h5py ismrmrd matplotlib pydicom==3.0.1 pynetdicom nibabel scipy scikit-image" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/ismrmrd/ismrmrd-python-tools.git \\\\\\n && cd ismrmrd-python-tools \\\\\\n && pip3 install --no-cache-dir ." \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/kspaceKelvin/python-ismrmrd-server \\\\\\n && find /opt/code/python-ismrmrd-server -name \\"*.sh\\" -exec chmod +x {} \\\\; \\\\\\n && find /opt/code/python-ismrmrd-server -name \\"*.sh\\" | xargs dos2unix \\\\\\n && sed -i '"'"'s/invertcontrast/default_replace_with_valid_name/g'"'"' /opt/code/python-ismrmrd-server/main.py" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "gcc-aarch64-linux-gnu cmake make build-essential" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           gcc-aarch64-linux-gnu cmake make build-essential \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/code" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "cbsfmrilogging.py", \
          "/opt/code/python-ismrmrd-server/cbsfmrilogging.py" \
        ], \
        "destination": "/opt/code/python-ismrmrd-server/cbsfmrilogging.py" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.